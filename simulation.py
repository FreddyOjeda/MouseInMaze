import tkinter as tk

# Crear la ventana principal
window = tk.Tk()
window.title("Laberinto")

# Crear el lienzo
canvas = tk.Canvas(window, width=500, height=500)
canvas.pack()


def load_maze_from_file(filename):
    maze = []
    with open(filename, "r") as file:
        for line in file:
            row = [int(cell) for cell in line.strip().split()]
            maze.append(row)
    return maze

# Crear la matriz del laberinto
""" laberinto = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
    [1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
] """

laberinto=load_maze_from_file("./matrix_output3.txt")

def invert_coordinates(coordinates):
    inverted_coordinates = [(col, row) for row, col in coordinates]
    return inverted_coordinates

# Crear el camino solución
#camino = [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]
cam = [(1, 30), (1, 29), (1, 28), (1, 27), (1, 26), (1, 25), (1, 24), (1, 23), (1, 22), (1, 21), (1, 20), (2, 20), (3, 20), (4, 20), (5, 20), (6, 20), (7, 20), (8, 20), (9, 20), (10, 20), (11, 20), (12, 20), (13, 20), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (15, 30), (16, 30), (17, 30), (18, 30), (19, 30), (20, 30), (21, 30), (22, 30), (22, 29), (22, 28), (21, 28), (20, 28), (19, 28), (18, 28), (17, 28), (16, 28), (16, 27), (16, 26), (17, 26), 
(18, 26), (19, 26), (20, 26), (21, 26), (22, 26), (22, 25), (22, 24), (21, 24), (20, 24), (19, 24), (18, 24), (17, 24), (16, 24), (16, 23), (16, 22), (17, 22), (18, 22), (19, 22), (20, 22), (21, 22), (22, 22), (22, 21), (22, 20), (22, 19), (23, 19), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 24), (24, 25), (24, 26), (24, 27), (24, 28), (24, 29), (24, 30), (25, 30), (26, 30), (27, 30), (28, 30), (29, 30), (30, 30), (30, 29), (30, 28), (29, 28), (28, 28), (27, 28), (26, 28), (26, 27), (26, 26), (27, 26), (28, 26), (29, 26), (30, 26), (30, 25), (30, 24), (29, 24), (28, 24), (27, 24), (26, 24), (26, 23), (26, 22), (27, 22), 
(28, 22), (29, 22), (30, 22), (30, 21), (30, 20), (29, 20), (28, 20), (27, 20), (26, 20), (26, 19), (26, 18), (27, 18), (28, 18), (29, 18), (30, 18), (30, 17), (30, 16), (29, 16), (28, 16), (27, 16), (26, 16), (25, 16), (24, 16), (24, 17), (23, 17), (22, 17), (21, 17), (20, 17), (20, 18), (20, 19), (20, 20), (19, 20), (18, 20), (17, 20), (16, 20), (16, 19), (16, 18), (15, 18), (14, 18), (13, 18), (12, 18), (11, 18), (10, 18), (9, 18), (8, 18), (7, 18), (6, 18), (5, 18), (4, 18), (3, 18), (2, 18), (1, 18), (1, 17), (1, 16), (2, 16), (3, 16), (4, 16), (5, 16), (6, 16), (7, 16), (8, 16), (9, 16), (10, 16), (11, 16), (12, 16), (13, 16), (14, 16), (15, 16), (16, 16), (17, 16), (18, 16), (18, 15), (19, 15), (20, 15), (21, 15), (22, 15), (22, 14), (22, 13), (22, 12), (22, 11), (22, 10), (21, 10), (20, 10), (20, 11), (20, 12), (20, 13), (19, 13), (18, 13), (17, 13), (16, 13), (16, 14), (15, 
14), (14, 14), (13, 14), (12, 14), (11, 14), (10, 14), (9, 14), (8, 14), (7, 14), (6, 14), (5, 14), (4, 14), (3, 14), (2, 14), (1, 14), (1, 13), (1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), 
(13, 12), (14, 12), (14, 11), (15, 11), (16, 11), (17, 11), (18, 11), (18, 10), (18, 9), (18, 8), (17, 8), (16, 8), (16, 7), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 6), (23, 6), (24, 6), (25, 6), (26, 6), (27, 6), (27, 5), (27, 4), (26, 
4), (26, 3), (26, 2), (26, 1), (25, 1), (24, 1), (24, 2), (24, 3), (24, 4), (23, 4), (22, 4), (22, 3), (22, 2), (22, 1), (21, 1), (20, 1), (20, 2), (20, 3), (20, 4), (19, 4), (18, 4), (18, 3), (18, 2), (18, 1), (17, 1), (16, 1), (16, 2), (16, 3), (16, 4), 
(15, 4), (14, 4), (14, 3), (14, 2), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (10, 2), (10, 3), (10, 4), (11, 4), (12, 4), (12, 3)]
camino = invert_coordinates(cam)
# Tamaño de cada celda en píxeles
cell_size = 15

# Dibujar el laberinto
for i in range(len(laberinto)):
    for j in range(len(laberinto[i])):
        x1 = j * cell_size
        y1 = i * cell_size
        x2 = x1 + cell_size
        y2 = y1 + cell_size
        
        if laberinto[i][j] == 1:
            canvas.create_rectangle(x1, y1, x2, y2, fill="black")
        else:
            canvas.create_rectangle(x1, y1, x2, y2, fill="white")

# Dibujar el camino solución
for step in camino:
    row, col = step
    x1 = col * cell_size + cell_size // 4
    y1 = row * cell_size + cell_size // 4
    x2 = x1 + cell_size // 2
    y2 = y1 + cell_size // 2
    canvas.create_oval(x1, y1, x2, y2, fill="green")

# Iniciar el bucle principal de la interfaz gráfica
window.mainloop()
